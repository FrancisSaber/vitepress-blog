import{_ as o,o as t,c as r,x as n,C as e,z as l,N as s,D as c,a as p}from"./chunks/framework.2919e4b3.js";const f=JSON.parse('{"title":"Git笔记1","description":"","frontmatter":{"title":"Git笔记1","author":"ccy","date":"2023-04-12","showAccessNumber":true,"categories":["Git"],"tags":["Git"]},"headers":[],"relativePath":"write/Git/index.md","lastUpdated":1682340187000}'),i={name:"write/Git/index.md"},d=s('<h1 id="knowledge-point" tabindex="-1">knowledge point <a class="header-anchor" href="#knowledge-point" aria-label="Permalink to &quot;knowledge point&quot;">​</a></h1><h2 id="rebase-merge" tabindex="-1">rebase &amp; merge <a class="header-anchor" href="#rebase-merge" aria-label="Permalink to &quot;rebase &amp; merge&quot;">​</a></h2><h3 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h3>',3),C=s(`<p><strong>想要将当前分支合并到另一个分支</strong></p><ul><li><p>方式一</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># current branch feature1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 想要将当前分支合并到 feature</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">feature</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># git fetch origin master &amp; git rebase origin/master 两条件命令的合并。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>方式二</p></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># current branch feature1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 想要将当前分支合并到 master</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,3),m=s('<h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><blockquote><p>在 <code>rebase</code> 操作中，源分支的提交会被“重新播放”在目标分支的最新提交之上，形成一个新的线性提交历史。使用 rebase 操作可以使提交历史更加干净整洁，分指数呈线性，但是需要注意的是，rebase 操作会改变提交历史（提交哈希会改变），因此需要谨慎使用。</p><p>在 <code>merge</code> 操作中，源分支和目的分支会基于分支点按时间顺序将提交排序，并生成一个新的提交。分指数呈分线性。</p><p>两种方式产生冲突都需要解决。对于 rebase 执行 <code>git rebase --continue</code> 继续，对于 merge，执行 <code>git merge --continue</code>，但<code>merge</code>可能会自动提交。可以使用 <code>git merge --no-commit</code> 命令来禁止 Git 自动提交中间提交。</p><p>如下图。 他们都是基于分支的共同公共祖先开始的，这里是 C2</p><p><img src="https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202303261543796.png" alt="image-20230326154325571" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202303261544787.png" alt="image-20230326154412694"></p><p>基于 C2 切出了 dev 分支，同时<code>master</code>也有了新的提交记录。</p><img src="https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202303261544787.png" alt="image-20230326154412694" style="zoom:67%;"><p><strong>对于 rebase</strong></p><p><img src="https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202303261547806.png" alt="image-20230326154715719"></p><p><strong>对于 merge</strong></p><img src="https://cdn.jsdelivr.net/gh/FrancisSaber/image/markdown-Image202303261548888.png" alt="image-20230326154840792" style="zoom:80%;"></blockquote><h2 id="pull" tabindex="-1">pull <a class="header-anchor" href="#pull" aria-label="Permalink to &quot;pull&quot;">​</a></h2><p>​ 这个命令是 <code>git fetch &amp; git merge</code> 的合并。</p><h3 id="用法-1" tabindex="-1">用法 <a class="header-anchor" href="#用法-1" aria-label="Permalink to &quot;用法&quot;">​</a></h3>',5),y=s(`<p><strong>默认行为</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># current dev branch 当前在dev分支</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">仓库</span><span style="color:#A6ACCD;">名</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">分支</span><span style="color:#A6ACCD;">名</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># git pull 后面不加内容的话默认是基于当前分支</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 上面的等价于 假设远程仓库名为 origin</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/dev</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/dev</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,3),g=s(`<div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull.rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>加上 rebase</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># git pull --rebase origin/master</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 上面等价于</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/master</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin/master</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,4);function b(u,h,A,D,_,E){const a=c("font");return t(),r("div",null,[d,n("blockquote",null,[C,e(a,{color:"orange"},{default:l(()=>[p("在上述例子，必须保证`master`  和  `feature`同步了最新的远程分支内容")]),_:1})]),m,n("blockquote",null,[y,e(a,{color:"orange"},{default:l(()=>[p("`git pull`默认使用 merge，可以如下修改默认行为")]),_:1}),g])])}const F=o(i,[["render",b]]);export{f as __pageData,F as default};
