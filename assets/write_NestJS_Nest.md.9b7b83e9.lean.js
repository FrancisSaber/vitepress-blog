import{_ as e,o as t,c as r,C as l,z as p,x as s,a as n,N as o,D as c}from"./chunks/framework.2919e4b3.js";const os=JSON.parse('{"title":"NestJS笔记","description":"","frontmatter":{"title":"NestJS笔记","author":"ccy","date":"2023-04-12","showAccessNumber":true,"categories":["NestJS"],"tags":["NestJS","Node"]},"headers":[],"relativePath":"write/NestJS/Nest.md","lastUpdated":1682340187000}'),y={name:"write/NestJS/Nest.md"},D=o("",5),F=o("",5),i=o("",2),C=s("code",null,"nest",-1),A=s("code",null,"nest",-1),b=s("code",null,"json",-1),u=s("code",null,"string、number",-1),d=s("code",null,"express",-1),m=s("code",null,"res.json 或res.send",-1),h=o("",16),g=s("p",null,[n("方式一：将该模块的"),s("code",null,"service"),n("直接导入自己模块的"),s("code",null,"providers"),n("数组")],-1),f=s("p",null,[n("方式二：导入该模块到自己模块的"),s("code",null,"imports"),n("数组而且该模块的"),s("code",null,"exports"),n("需要将他的服务导出")],-1),v=s("p",null,[n("方式一：需要将自己模块导入"),s("code",null,"appModule"),n("的"),s("code",null,"imports"),n("数组")],-1),E=s("p",null,[n("方式二：将自己导入一个非根模块的"),s("code",null,"imports"),n("数组内，但这个非根模块自身已经导入到了根模块的"),s("code",null,"imports"),n("数组内")],-1),B=o("",8),_=s("code",null,"Nest",-1),x=s("code",null,"Global",-1),k=o("",12),P=s("li",null,"这种情况可能存在于依赖对象是可配置的，如需要判断是否是本地或线上环境，是线上的会返回依赖对象，是本地的不会返回依赖，需要使用后默认信息。",-1),q=o("",2),w=o("",44),T=s("li",null,[s("code",null,"nest"),n("内置了多个开箱即用的管道")],-1),S=s("li",null,"校验出错会被异常捕获器处理",-1),M=o("",10),I=o("",19),N=s("p",null,[s("code",null,"ValidationPipe")],-1),j=o("",1),R=s("li",null,[s("code",null,"ValidationPipe"),n(" 管类可以传入参数选项")],-1),O=o("",5),H=s("li",null,[s("p",null,[s("code",null,"ParseIntPipe"),n(" : 整数校验")])],-1),V=s("li",null,[s("p",null,[s("code",null,"ParseBoolPipe"),n("：布尔校验")])],-1),U=s("li",null,[s("p",null,[s("code",null,"ParseUUIDPipe"),n("：UUID 校验")])],-1),G=o("",15),L=o("",12),J={id:"混合装饰器",tabindex:"-1"},X=s("a",{class:"header-anchor",href:"#混合装饰器","aria-label":'Permalink to "<font color=:orange>混合装饰器</font>"'},"​",-1),Y=o("",11),K=o("",34),$=o("",26),z=o("",29);function Q(W,Z,ss,ns,as,ls){const a=c("font");return t(),r("div",null,[D,l(a,{color:"orange"},{default:p(()=>[n("守卫在所有中间件之后执行，但在所有管道和拦截器之前执行")]),_:1}),F,s("p",null,[n("​ "),l(a,{color:"orange"},{default:p(()=>[n("控制器属于模块，想要使用必须将其引入模块")]),_:1})]),i,s("p",null,[n("​ "),l(a,{color:"orange"},{default:p(()=>[n("当使用"),C,n("内置方法时，对于对象或数组，"),A,n("会尝试将其序列化为"),b,n("对象再返回，对于原始数据类型（"),u,n("）会直接返回")]),_:1})]),s("p",null,[n("​ "),l(a,{color:"orange"},{default:p(()=>[n("也可以用"),d,n("库的方式处理返回信息，需要要@Res 装饰器处理,当使用了@Res 时，必须通过"),m,n("调用响应对象，否则请求将被挂起。")]),_:1})]),h,s("blockquote",null,[l(a,{color:"orange"},{default:p(()=>[n("一个控制器想要调用其他模块服务")]),_:1}),g,f,l(a,{color:"orange"},{default:p(()=>[n("一个非`appModule`想要生效，或者是将自己导入一个非根模块的`imports`内，")]),_:1}),v,E]),B,s("p",null,[n("​ "),l(a,{color:"orange"},{default:p(()=>[_,n("通过"),x,n("装饰器声名一个可以全局调用的模块")]),_:1})]),k,s("blockquote",null,[s("ul",null,[s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("默认情况下，如果依赖注入的对象不存在会提示错误，中断应用运行，此时可以使用`@Optional()`来指明选择性注入，但依赖注入的对象不存在时不会发生错误。")]),_:1})]),P]),q]),w,s("ul",null,[s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("用于对输入数据转化成特定格式")]),_:1})]),s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("验证输入数据")]),_:1})]),T,S]),M,l(a,{color:"orange"},{default:p(()=>[n("`UsePipes`  装饰器从 `@nestjs/common`包导入")]),_:1}),I,s("ul",null,[s("li",null,[N,s("blockquote",null,[j,s("ul",null,[s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("内部通过元数据 `ArgumentMetadata`对象的 `metatype` 获取类型化对象校验，这里对应是`UserInfoDto`")]),_:1})]),R]),O])]),H,V,U]),G,l(a,{color:"orange"},{default:p(()=>[n("`CallHandler.handle`返回一个来自路由的`Observale`对象，通过`rxjs`操作")]),_:1}),L,s("h3",J,[l(a,{color:":orange"},{default:p(()=>[n("混合装饰器")]),_:1}),n(),X]),Y,s("ul",null,[s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("动态模块提供了静态方法 API（通常命名为`register、forRoot`），当一个模块想要导入动态模块时，可以在导入时传入配置来定义适配本模块")]),_:1})]),s("li",null,[l(a,{color:"orange"},{default:p(()=>[n("一个模块的静态方法应该返回一个对象具备完全相同的接口，外加一个`module`的属性")]),_:1})])]),K,l(a,{color:"orange"},{default:p(()=>[n("通过`ConfigService`使用`ConfigModule`配置")]),_:1}),$,l(a,{color:"orange"},{default:p(()=>[n(" `set`第三个参数设置 TTL 存活时间，设置 0 而缓存不会过期")]),_:1}),z])}const es=e(y,[["render",Q]]);export{os as __pageData,es as default};
